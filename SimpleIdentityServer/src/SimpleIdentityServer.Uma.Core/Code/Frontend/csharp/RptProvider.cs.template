#region copyright
// Copyright 2015 Habart Thierry
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#endregion

using SimpleIdentityServer.Client;
using SimpleIdentityServer.Client.DTOs.Response;
using SimpleIdentityServer.Client.DTOs.Requests;
using System.Collections.Generic;
using System.Security.Claims;

namespace SimpleIdentityServer.Uma.Core.Code.Frontend.csharp
{
    public static class RptProvider
    {
        private static IdentityServerClientFactory _identityServerClientFactory = new IdentityServerClientFactory();

        private static IdentityServerUmaClientFactory _identityServerUmaClientFactory = new IdentityServerUmaClientFactory();

        private const string UmaProtectionScope = "uma_protection";

        private const string UmaAuthorizationScope = "uma_authorization";

        #region Public static methods

        public static string GetAuthorization(string resourceSetId,
            List<string> scopes,
            string clientId,
            string clientSecret,
            string authorizationUrl,
            string umaUrl)
        {
            // 1. Get valid token for uma_protection scope
            var umaProtectionToken = GetGrantedToken(UmaProtectionScope, clientId, clientSecret, authorizationUrl);
            // 2. Get valid token for uma_authorization scope
            var umaAuthorizationToken = GetGrantedToken(UmaAuthorizationScope, clientId, clientSecret, authorizationUrl);
            // 3. Get a permission
            var permission = AddPermission(resourceSetId, scopes, umaProtectionToken.AccessToken, umaUrl);
            // 4. Get authorization
            var authorization = GetAuthorization(permission.TicketId, umaAuthorizationToken.AccessToken);
            return authorization.Rpt;
        }

		public static string GetAuthorization(string resourceSetId,
			List<string> scopes,
			string clientId,
			string clientSecret,
			string idToken,
			string authorizationUrl,
			string umaUrl)
        {
            // 1. Get valid token for uma_protection scope
            var umaProtectionToken = GetGrantedToken(UmaProtectionScope, clientId, clientSecret, authorizationUrl);
            // 2. Get valid token for uma_authorization scope
            var umaAuthorizationToken = GetGrantedToken(UmaAuthorizationScope, clientId, clientSecret, authorizationUrl);
            // 3. Get a permission
            var permission = AddPermission(resourceSetId, scopes, umaProtectionToken.AccessToken, umaUrl);
            // 4. Get authorization
            var authorization = GetAuthorization(permission.TicketId, umaAuthorizationToken.AccessToken, idToken);
            return authorization.Rpt;
        }

        public static string AuthenticateUser(
			string clientId,
			string clientSecret,
			string login,
			string password,
			string authorizationUrl)
        {
            var result = _identityServerClientFactory.CreateTokenClient()
                .UseClientSecretPostAuth(clientId, clientSecret)
                .UsePassword(login, password, "openid", "role")
                .ResolveAsync(authorizationUrl + "/.well-known/openid-configuration")
                .Result;
            return result.IdToken;
        }

        #endregion

        #region Private static methods

        private static GrantedToken GetGrantedToken(string scope, 
            string clientId, 
            string clientSecret, 
            string authorizationUrl)
        {
            var result = _identityServerClientFactory.CreateTokenClient()
                .UseClientSecretPostAuth(clientId, clientSecret)
                .UseClientCredentials(scope)
                .ResolveAsync(authorizationUrl + "/.well-known/openid-configuration")
                .Result;
            return result;
        }

        private static AddPermissionResponse AddPermission(
            string resourceSetId, List<string> scopes, 
            string accessToken,
            string umaUrl)
        {
            var postPermission = new PostPermission
            {
                ResourceSetId = resourceSetId,
                Scopes = scopes
            };
            var permission = _identityServerUmaClientFactory.GetPermissionClient()
                .AddPermissionAsync(postPermission, umaUrl + "/perm", accessToken)
                .Result;
            return permission;
        }

        private static AuthorizationResponse GetAuthorization(
            string ticketId, 
            string accessToken,
            string umaUrl,
			string idToken = null)
        {
            var postAuthorization = new PostAuthorization
            {
                TicketId = ticketId
            };
            if (!string.IsNullOrWhiteSpace(idToken))
            {
                postAuthorization.ClaimTokens = new List<PostClaimToken>
                {
                    new PostClaimToken
                    {
                        Format = "http://openid.net/specs/openid-connect-core-1_0.html#HybridIDToken",
                        Token = idToken
                    }
                };
            }

            var authorization = _identityServerUmaClientFactory.GetAuthorizationClient()
                .GetAuthorizationAsync(postAuthorization, umaUrl + "/rpt", accessToken)
                .Result;
            return authorization;
        }
		
        #endregion
    }
}
