// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdentityServer.Api.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GetAccessTokenMultipleTime")]
    public partial class GetAccessTokenMultipleTimeFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GetAccessTokenMultipleTime.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GetAccessTokenMultipleTime", "As an authenticated user\nI request several times an access token", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Request 3 times an access token")]
        public virtual void Request3TimesAnAccessToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Request 3 times an access token", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("a resource owner with username thierry and password loki is defined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.And("a mobile application MyHolidays is defined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
 testRunner.And("allowed number of requests is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.And("sliding time is 0.2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "client_id",
                        "username",
                        "password"});
            table1.AddRow(new string[] {
                        "MyHolidays",
                        "thierry",
                        "loki"});
            table1.AddRow(new string[] {
                        "MyHolidays",
                        "thierry",
                        "loki"});
            table1.AddRow(new string[] {
                        "MyHolidays",
                        "thierry",
                        "loki"});
#line 11
 testRunner.When("requesting access tokens", ((string)(null)), table1, "When ");
#line 17
 testRunner.Then("2 access tokens are generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "HttpStatusCode",
                        "Message"});
            table2.AddRow(new string[] {
                        "429",
                        "Allow 2 requests per 0.2 minutes"});
#line 18
 testRunner.And("the errors should be returned", ((string)(null)), table2, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Request 5 times an access token")]
        public virtual void Request5TimesAnAccessToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Request 5 times an access token", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("a resource owner with username thierry and password loki is defined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
 testRunner.And("a mobile application MyHolidays is defined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.And("allowed number of requests is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.And("sliding time is 0.2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "client_id",
                        "username",
                        "password"});
            table3.AddRow(new string[] {
                        "MyHolidays",
                        "thierry",
                        "loki"});
            table3.AddRow(new string[] {
                        "MyHolidays",
                        "thierry",
                        "loki"});
            table3.AddRow(new string[] {
                        "MyHolidays",
                        "thierry",
                        "loki"});
            table3.AddRow(new string[] {
                        "MyHolidays",
                        "thierry",
                        "loki"});
            table3.AddRow(new string[] {
                        "MyHolidays",
                        "thierry",
                        "loki"});
#line 28
 testRunner.When("requesting access tokens", ((string)(null)), table3, "When ");
#line 36
 testRunner.Then("2 access tokens are generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "HttpStatusCode",
                        "Message"});
            table4.AddRow(new string[] {
                        "429",
                        "Allow 2 requests per 0.2 minutes"});
            table4.AddRow(new string[] {
                        "429",
                        "Allow 2 requests per 0.2 minutes"});
            table4.AddRow(new string[] {
                        "429",
                        "Allow 2 requests per 0.2 minutes"});
#line 37
 testRunner.And("the errors should be returned", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Request 3 times an access token wait for 3 seconds and request 2 access tokens")]
        public virtual void Request3TimesAnAccessTokenWaitFor3SecondsAndRequest2AccessTokens()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Request 3 times an access token wait for 3 seconds and request 2 access tokens", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.Given("a resource owner with username thierry and password loki is defined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
 testRunner.And("a mobile application MyHolidays is defined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.And("allowed number of requests is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.And("sliding time is 0.2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "client_id",
                        "username",
                        "password"});
            table5.AddRow(new string[] {
                        "MyHolidays",
                        "thierry",
                        "loki"});
            table5.AddRow(new string[] {
                        "MyHolidays",
                        "thierry",
                        "loki"});
            table5.AddRow(new string[] {
                        "MyHolidays",
                        "thierry",
                        "loki"});
#line 49
 testRunner.When("requesting access tokens", ((string)(null)), table5, "When ");
#line 54
 testRunner.And("waiting for 3000 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "client_id",
                        "username",
                        "password"});
            table6.AddRow(new string[] {
                        "MyHolidays",
                        "thierry",
                        "loki"});
            table6.AddRow(new string[] {
                        "MyHolidays",
                        "thierry",
                        "loki"});
#line 55
 testRunner.And("requesting access tokens", ((string)(null)), table6, "And ");
#line 60
 testRunner.Then("4 access tokens are generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "HttpStatusCode",
                        "Message"});
            table7.AddRow(new string[] {
                        "429",
                        "Allow 2 requests per 0.2 minutes"});
            table7.AddRow(new string[] {
                        "429",
                        "Allow 2 requests per 0.2 minutes"});
#line 62
 testRunner.And("the errors should be returned", ((string)(null)), table7, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
